{"version":3,"sources":["services/persons.js","components/PersonForm.js","components/Filter.js","components/Persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","PersonForm","addName","newName","handleNameChange","newNum","handleNumChange","onSubmit","value","onChange","type","Filter","Persons","persToShow","delPer","pers","map","e","key","name","number","onClick","Notification","message","includes","className","App","people","useState","persons","setPersons","setNewName","setNewNum","srch","setSrch","errorMessage","setErrorMessage","useEffect","personService","initialPersons","regex","RegExp","result","filter","per","match","target","preventDefault","indexOf","returnedPerson","concat","setTimeout","window","confirm","find","changedPerson","returnedPers","p","catch","error","n","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.80e504c5.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst del = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`);\r\n};\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  del,\r\n  update,\r\n};","import React from \"react\";\r\n\r\nconst PersonForm = ({\r\n  addName,\r\n  newName,\r\n  handleNameChange,\r\n  newNum,\r\n  handleNumChange,\r\n}) => (\r\n  <form onSubmit={addName}>\r\n    <div>\r\n      name: <input value={newName} onChange={handleNameChange} />\r\n    </div>\r\n    <div>\r\n      number: <input value={newNum} onChange={handleNumChange} />\r\n    </div>\r\n    <div>\r\n      <button type=\"submit\">add</button>\r\n    </div>\r\n  </form>\r\n);\r\n\r\nexport default PersonForm;\r\n","import React from \"react\";\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <div>\r\n      <input value={value} onChange={onChange} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\n\r\nconst Persons = ({ persToShow, delPer, pers }) => {\r\n  //console.log(persToShow);\r\n  return (\r\n    <div>\r\n      {persToShow.map((e) => (\r\n        <p key={e.name}>\r\n          {e.name}\r\n          &nbsp;\r\n          {e.number}\r\n          &nbsp;\r\n          <button onClick={() => delPer(e.id, e.name)}>delete</button>\r\n        </p>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Persons;\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  } else if (message.includes(\"Information\")) {\r\n    return <div className=\"errorred\">{message}</div>;\r\n  }\r\n\r\n  return <div className=\"error\">{message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport personService from \"./services/persons\";\nimport PersonForm from \"./components/PersonForm\";\nimport Filter from \"./components/Filter\";\nimport Persons from \"./components/Persons\";\nimport Notification from \"./components/Notification\";\n\nconst App = ({ people }) => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNum, setNewNum] = useState(\"\");\n  const [srch, setSrch] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(null);\n  let persToShow = [...persons];\n\n  useEffect(() => {\n    personService.getAll().then((initialPersons) => {\n      setPersons(initialPersons);\n    });\n  }, []);\n\n  const handleNameChange = (e) => {\n    setNewName(e.target.value);\n  };\n\n  const handleNumChange = (e) => {\n    setNewNum(e.target.value);\n  };\n\n  const handleSrch = (e) => {\n    setSrch(e.target.value);\n  };\n\n  const addName = (e) => {\n    e.preventDefault();\n    const names = persons.map((e) => e.name);\n    //console.log(persons);\n    if (names.indexOf(newName) < 0) {\n      const persObject = {\n        name: newName,\n        number: newNum,\n      };\n      personService.create(persObject).then((returnedPerson) => {\n        setPersons(persons.concat(returnedPerson));\n        setErrorMessage(`Added  ${newName}`);\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNewName(\"\");\n        setNewNum(\"\");\n      });\n    } else {\n      if (\n        window.confirm(\n          `${newName} is already added to phonebook, replace the old number with a new one?`\n        )\n      ) {\n        const pers = persons.find((e) => e.name === newName);\n        const changedPerson = {\n          ...pers,\n          number: newNum,\n        };\n        personService\n          .update(pers.id, changedPerson)\n          .then((returnedPers) => {\n            setPersons(\n              persons.map((p) => (p.id !== pers.id ? p : returnedPers))\n            );\n          })\n          .catch((error) => {\n            setErrorMessage(\n              `Information of ${pers.name} has already been removed from server`\n            );\n            setTimeout(() => {\n              setErrorMessage(null);\n            }, 5000);\n            setPersons(persons.filter((p) => p.id !== pers.id));\n          });\n        setErrorMessage(`Number of ${newName} is changed to ${newNum}`);\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n      }\n      setNewNum(\"\");\n      setNewName(\"\");\n    }\n  };\n\n  const delPer = (id, name) => {\n    const person = persons.find((n) => n.id === id);\n    //console.log(person);\n    if (window.confirm(`Delete ${name}?`)) {\n      setPersons(persons.filter((e) => e.id !== id));\n      personService.del(id);\n    }\n  };\n\n  var func = (function mySearch() {\n    var stringToGoIntoTheRegex = srch;\n    var regex = new RegExp(stringToGoIntoTheRegex, \"i\");\n    var result = persons.filter((per) => per.name.match(regex));\n    //string.match(regex);\n    persToShow = result;\n  })();\n\n  return (\n    <div>\n      <h2> Phonebook </h2>\n      <Notification message={errorMessage} />\n      <div>\n        filter shown with\n        <Filter value={srch} onChange={handleSrch} persons={persons} />\n      </div>\n      <h3> Add a new </h3>\n      <PersonForm\n        newName={newName}\n        newNum={newNum}\n        handleNameChange={handleNameChange}\n        handleNumChange={handleNumChange}\n        addName={addName}\n      />\n      <h3> Numbers </h3> <Persons persToShow={persToShow} delPer={delPer} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport axios from \"axios\";\n\nReactDOM.render( <\n  React.StrictMode >\n  <\n  App / >\n  <\n  /React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}